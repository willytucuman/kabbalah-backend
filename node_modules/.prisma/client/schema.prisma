generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

// ###################################
// ############ MODELS
// ###################################

// Usuario
model User {
  id          String   @id @default(uuid())
  name        String
  lastName    String
  email       String   @unique
  birthDate   DateTime
  nationality String
  role        Role     @default(USER)
  password    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relaciones
  orders Order[] // Un usuario puede tener muchas órdenes
}

// Producto
model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relaciones
  categories CategoriesOnProducts[] // Relación muchos a muchos con categorías
  orderItems OrderItem[] // Un producto puede estar en muchos items de órdenes
}

// Categoría
model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relaciones
  products CategoriesOnProducts[] // Relación muchos a muchos con productos
}

// Tabla intermedia para la relación muchos a muchos entre Product y Category
model CategoriesOnProducts {
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId]) // Clave primaria compuesta
}

// Orden
model Order {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  total         Float
  discount      Float?   @default(0.0)
  paymentMethod String?
  status        String   @default("pending") // Estados: pending, completed, cancelled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  // Relaciones
  items OrderItem[] // Una orden puede tener muchos items
}

// Item de Orden
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}
